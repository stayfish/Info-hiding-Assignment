#pragma once

#include<sstream>
using std::stringstream;

#include"bitmap.h"
#include"DCT.h"

const int N = 136;

const int zig[ NUM * NUM] = {
    0, 1, 8, 16, 9, 2, 3, 10,
    17, 24, 32, 25, 18, 11, 4, 5,
    12, 19, 26, 33, 40, 48, 41, 34,
    27, 20, 13, 6, 7, 14, 21, 28,
    35, 42, 49, 56, 57, 50, 43, 36,
    29, 22, 15, 23, 30, 37, 44, 51,
    58, 59, 52, 45, 38, 31, 39, 46,
    53, 60, 61, 54, 47, 55, 62, 63,
};

const int zig_mid[34] = {
    5, 12, 19, 26, 33, 40, 48, 
    41, 34, 27, 20, 13, 6, 7, 
    14, 21, 28, 35, 42, 49, 56, 
    57, 50, 43, 36, 29, 22, 15, 
    23, 30, 37, 44, 51, 58
};

const int w[N] = { 
    -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,
    1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1,
    -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,
    1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1,
    -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,
    1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1,
    -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,
    1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1,
    -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,
    1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1,
    -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,
    1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1,
    -1, 1, -1, 1
};

#ifdef DEBUG
#define TEST_BLK 0
#endif

#ifdef TEST_BLK
#include<iomanip>
using std::setw;
using std::hex;
const string test_path = "../build/test_blk.txt";
const int test_height = 2;
const int test_width = 2;
const BYTE test_bmp[test_width * NUM * test_height * NUM] = {
    0xbb,0x8f,0xbc,0xa6,0xab,0xb9,0x94,0xdf,0x4d,0x57,0xfb,0xb5,0x51,0xeb,0xa3,0x3,
    0x58,0x79,0x81,0x9f,0x3,0x83,0x72,0xbb,0xf4,0xc9,0x72,0x48,0x1d,0x44,0xd2,0x32,
    0x33,0x23,0x9d,0xb9,0x47,0xd7,0xaa,0xa3,0xc9,0xdd,0x6a,0x55,0xc7,0xb9,0x7d,0x73,
    0xd0,0xa2,0xc7,0x1e,0xdf,0xcf,0x78,0xf6,0x10,0xf,0x9c,0x8c,0x9e,0x3e,0xae,0x3,
    0xed,0xfe,0x66,0x9,0x4d,0x70,0xa1,0x5d,0x4b,0xc9,0xd9,0xdf,0xac,0x58,0xb3,0x5b,
    0xab,0xf3,0x72,0x4f,0xc2,0xb1,0xf5,0xfc,0x82,0x7f,0x48,0x1e,0xa2,0x90,0xff,0xd0,
    0xf2,0x7a,0xa3,0x8,0xcb,0x9c,0xab,0xeb,0xd1,0x23,0xe4,0xa3,0xe7,0x9f,0x19,0xfc,
    0x5,0x81,0x1f,0x4b,0xac,0x8c,0x38,0x9,0xb4,0xe9,0xd5,0x35,0xed,0xf6,0xc3,0x9a,
    0x4b,0x2f,0xa5,0x8d,0x97,0xdf,0x97,0xa4,0xee,0xae,0x28,0x42,0xe9,0xf5,0x71,0xcc,
    0xbb,0xb3,0x5e,0x4,0x3a,0x75,0x65,0x69,0xdd,0x54,0x1d,0x43,0xf2,0x9,0xa7,0x58,
    0x1d,0x10,0x2f,0xb3,0x8,0x65,0xe1,0xf,0x1d,0x73,0x4d,0x4d,0x6f,0xbb,0xa1,0x25,
    0x7f,0x1f,0x35,0x2e,0xc0,0xaf,0x2d,0x8e,0x73,0x50,0x6e,0x7c,0xb6,0x9d,0xb1,0xd3,
    0x21,0xc7,0x4e,0xe6,0x51,0x76,0xc8,0xe1,0x71,0xf,0x9e,0x9b,0x85,0x54,0xdc,0xcf,
    0x25,0xdb,0xd2,0x7f,0x94,0x34,0x50,0x26,0xe5,0xa7,0xb6,0x73,0x9e,0x47,0xac,0x16,
    0x4a,0x97,0x8c,0x61,0x95,0x24,0x95,0x3b,0xc5,0x2c,0xb7,0x46,0xff,0x62,0x97,0x41,
    0x96,0xbd,0xbf,0x2,0x49,0xe3,0xbd,0x14,0x46,0xbc,0x0,0x79,0xf8,0xe9,0x84,0xdb
};
void BLOCK_test();
#endif



// const double a = 20; // 嵌入强度
const string bpath = "../build/b";
const string b0path = "../build/b0.txt";
const string perf_path = "../build/performance";

typedef BYTE BYTE_BLOCK[NUM][NUM];

BYTE_BLOCK* get_byte_blocks(const BITMAP&, int, int);
BITMAP byte_blocks_to_BITMAP(const BYTE_BLOCK*, int, int);

BMP ASS_encode(const BMP&, const BMP&, double, const string&);
void embed_block(BLOCK&, double, int, int, int);
// void embed(BITMAP&, BITMAP&, BITMAP&, double);
BMP ASS_decode(const BMP&,const BMP&, const string&, double);
double decode_block(BLOCK&, int, int);
void performance(double);